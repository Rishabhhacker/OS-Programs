JUST LECTURE NOTES

SYSTEM CALLS(READ, WRITE,LSEEK,OPEN)
Q. Program to write some message(data) on the screen.

#include<unistd.h> int main()
{
write(1, "hello", 5);
}

Q. Program to read input from the user and print it on the screen.

#include<unistd.h> int main()
{
int n;
char buff[50];
n= read(0, buff, 50);
write(1, buff, n);
}



Q. Program to create a file and write some content into it by taking the input from the user.

#include<fcntl.h> #include<sys/stats.h> #include<sys/types.h> int main()
{
int n, fd;
char buff[100]; n=read(0, buff, 100);
 
fd=open("file",O_CREAT | O_RDWR, 0777);
write(fd, buff, n);

}
Write a programs to demonstrate the use of lseek() with SEEK_SET, SEEK_CUR and SEEK_END.


#include <unistd.h> #include <stdio.h> #include<fcntl.h>

int main()
{
int n,off;
char buffer[10]; n=open("F1",O_RDWR); read(n,buffer,5); write(1,buffer,5); off=lseek(n,10,SEEK_SET);
printf("\nCurrent position is %d\n",off); read(n,buffer,5);
write(1,buffer,5);
}

PROCESS DUPLICATION
Write a program that creates child process of a process i.e. process P having child process P1

#include<sys/types.h> #include<unistd.h> #include<stdio.h>
int main()
{
pid_t p; p=fork(); switch(p)
{
 
case -1:


case 0:
 

printf("Error\n"); break;
 
printf(“I am child having id:%d\n”,getpid()); printf(“My parent’s id is:%d\n”,getppid());
break;
default:
printf(“I am parent having id:%d\n”,getpid()); printf(“My child’s id is: %d\n”,p);
break;
}
}


Write a program to create a child process. The parent process prints 20-29 and child process prints 0-9. Also both the process prints a common message. #include<sys/types.h>
#include<unistd.h> #include<stdio.h> int main()
{
 
pid_t p; int i,j; p=fork(); switch(p)
{
 




case -1:


case 0:
 





printf("Error\n"); break;
 

 






default:
 
for(i=0;i<10;i++)
{
printf("%d\n",i); sleep(1);
}
break;

wait(); for(j=20;j<30;j++)
{
printf("%d\n",j);
 



}
printf("common\n");
}
 
sleep(1);
}
break;
 

Replacing a process image - exec( ) #include<stdio.h> #include<unistd.h>
int main()
{
printf("Before execl\n"); execl("/bin/ps","ps","-a",NULL);// printf("After execlp\n");
}

Write a C program to demonstrate Orphan Process.

#include<stdio.h> #include <sys/types.h> #include <unistd.h>


int main()
{
int pid = fork();

if (pid > 0)
printf("in parent process");


else if (pid == 0)
{
sleep(30);
printf("in child process");
}

return 0;
}

2. Write a C program to demonstrate Zombie Process.
 
#include <stdlib.h> #include <sys/types.h> #include <unistd.h> int main()
{
pid_t child_pid = fork();

if (child_pid > 0) sleep(50);

else
exit(0);

return 0;
}
Thread creation

Program to create a thread. The thread prints numbers from zero to n, where value of n is passed from the main process to the thread. The main process also waits for the thread to finish first and then prints from 20-24.

#include <stdio.h> #include <unistd.h> #include <stdlib.h> #include <pthread.h> #include<string.h>
void *thread_function(void *arg); int i,n,j;
int main() { char *m="5";
pthread_t a_thread;
void *result;
pthread_create(&a_thread, NULL, thread_function, m); pthread_join(a_thread, &result);
printf("Thread joined\n"); for(j=20;j<25;j++)
 
{
printf("%d\n",j); sleep(1);
}
printf("thread returned %s\n",result);
}
void *thread_function(void *arg) { int sum=0;
n=atoi(arg);

for(i=0;i<n;i++)
{
printf("%d\n",i); sleep(1);
}
pthread_exit("Done");
}

Program to create a thread. The thread is passed more than one input from the main process.

#include <stdio.h> #include <pthread.h>

struct arg_struct { int arg1;
int arg2;
};

void *arguments(void *arguments)
{
struct arg_struct *args=arguments; printf("%d\n", args -> arg1); printf("%d\n", args -> arg2); pthread_exit(NULL);

}
 

int main()
{
pthread_t t;
struct arg_struct args; args.arg1 = 5;
args.arg2 = 7;

pthread_create(&t, NULL, arguments, &args);

pthread_join(t, NULL);
}

Synchronization/race condition/Critical section problem

Program to show the race condition.

#include<pthread.h> #include<stdio.h> void *fun1();
void *fun2(); int shared=1; int main()
{
pthread_t thread1, thread2; pthread_create(&thread1, NULL, fun1, NULL); pthread_create(&thread2, NULL, fun2, NULL); pthread_join(thread1, NULL); pthread_join(thread2,NULL);
printf("Final value of shared is %d\n",shared);
}

void *fun1()
{
int x; x=shared;
 
x++;
sleep(1); shared=x;
}

void *fun2()
{
int y; y=shared;
y--;
sleep(1); shared=y;
}

Program for process synchronization using locks

#include<pthread.h> #include<stdio.h> void *fun1();
void *fun2(); int shared=1;
pthread_mutex_t l; int main()
{
pthread_mutex_init(&l, NULL);
pthread_t thread1, thread2; pthread_create(&thread1, NULL, fun1, NULL); pthread_create(&thread2, NULL, fun2, NULL); pthread_join(thread1, NULL); pthread_join(thread2,NULL);
printf("Final value of shared is %d\n",shared);
 
}

void *fun1()
{
int x; pthread_mutex_lock(&l);
x=shared; x++;
sleep(1); shared=x;
pthread_mutex_unlock(&l);
}

void *fun2()
{
int y; pthread_mutex_lock(&l); y=shared;
y--;
sleep(1); shared=y;
pthread_mutex_unlock(&l);
}



Program for process synchronization using semaphores

#include<pthread.h> #include<stdio.h> #include<semaphore.h> void *fun1();
void *fun2(); int shared=1;
sem_t s;
 
int main()
{
sem_init(&s,0,1); pthread_t thread1, thread2;
pthread_create(&thread1, NULL, fun1, NULL); pthread_create(&thread2, NULL, fun2, NULL); pthread_join(thread1, NULL); pthread_join(thread2,NULL);
printf("Final value of shared is %d\n",shared);
}

void *fun1()
{
int x; sem_wait(&s); x=shared; x++;
sleep(1); shared=x; sem_post(&s);
}

void *fun2()
{
int y; sem_wait(&s); y=shared;
y--;
sleep(1); shared=y; sem_post(&s);
}

Program to implement pipes for inter process communication


Q. Program to send a message from parent process to child process.
 
#include<stdio.h> #include<stdlib.h> #include<unistd.h> int main()
{
int fd[2],n;
char buffer[100]; pid_t p;
pipe(fd);
p=fork(); if(p>0)
{
close(fd[0]);
printf("Passing value to child\n"); write(fd[1],"hello\n",6);
wait();

 
}
else
{



}
}
 




close(fd[1]); n=read(fd[0],buffer,100); write(1,buffer,n);
 


Program for inter-process communication using popen and pclose


Q. Program to write into a pipe

#include<stdio.h> #include<stdlib.h> #include<unistd.h>
 
#include<string.h> int main()
{
FILE *rd;
char buffer[50]; sprintf(buffer,"name first"); rd=popen("wc -c","w");

fwrite(buffer,sizeof(char),strlen(buffer),rd); pclose(rd);
}

Q. Program to read from a pipe

#include<stdio.h> #include<stdlib.h> #include<unistd.h> #include<string.h> int main()
{
FILE *rd;
char buffer[50]; rd=popen("ls","r"); fread(buffer, 1, 50, rd); printf("%s\n", buffer); pclose(rd);
}

Program for inter process communication using named pipes

Creating fifo/named pipe #include<unistd.h> #include<stdlib.h> #include<stdio.h> int main()
{
int res;
 
res = mkfifo("fifo1",0777); printf("named pipe created\n");
}

Writing to a fifo/named pipe #include<stdlib.h> #include<stdio.h> #include<fcntl.h>
int main()
{
int res,n; res=open("fifo1",O_WRONLY); write(res,"written",7);
printf("Process %d finished\n",getpid());
}

Reading from the named pipe #include<stdlib.h> #include<stdio.h> #include<fcntl.h>
int main()
{
int res,n;
char buffer[100]; res=open("fifo1",O_RDONLY); n=read(res,buffer,100); printf("Total bytes read: %d\n",n);
printf("%s was passed to me \n",buffer); printf("Process %d finished\n",getpid());

}

Program related to shared memory (IPC)
 
This program creates a shared memory segment, attaches itself to it and then writes some content into the shared memory segment.

#include<unistd.h> #include<stdlib.h> #include<stdio.h> #include<string.h> #include<sys/shm.h> int main()
{
int i;
void *shared_memory; char buff[100];
int shmid;
shmid=shmget((key_t)2345, 1000,0666|IPC_CREAT); printf("Key of shared memory is %d\n",shmid); shared_memory=shmat(shmid,NULL,0); printf("Process attached at %X\n",(int)shared_memory); printf("Enter some data to write to shared memory\n"); read(0,buff,100);
strcpy(shared_memory,buff);
printf("You wrote : %s\n",shared_memory);
}



Program 2: This program attaches itself to the shared memory segment created in Program 1 and then reads whatever was written in the shared memory via Program 1

#include<unistd.h> #include<stdlib.h> #include<stdio.h> #include<string.h> #include<sys/shm.h> int main()
{
int i;
 
void *shared_memory; char buff[100];
int shmid;
shmid=shmget((key_t)2345, 1000,0666); printf("Key of shared memory is %d\n",shmid); shared_memory=shmat(shmid,NULL,0);
printf("Process attached at %X\n",(int)shared_memory); printf("Data read from shared memory is : %s\n",shared_memory);
}
